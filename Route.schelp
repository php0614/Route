TITLE:: Route
summary:: .
categories:: .
related:: .

DESCRIPTION::

 Symbolic synth routing class inspired by ChucK and Faust, with convenient oscilloscope window; recording; osc send&receive feature.
by Philip Liu


To use this class with synths arg 'out' must be decalred. 'in' also should be decalred from second synth because through 'in' a synth takes signal from the previous one. put 'In.ar(in)' to a desired place.
optionally, if you decalre 'amp',  by the method '.amps' you can set all the amp value of synths at once by one array


SynthDef(\cont, { arg out,amp= 6,scope, mfreq = 3;
	var sig, gate = 1;
	sig = SinOsc.ar(mfreq);
	Out.ar(out,  sig);
}).send(s);

SynthDef(\osc, { arg out, in, amp; Out.ar(out, amp*SinOsc.ar(1000*In.ar(in))); }).send(s);

SynthDef(\filt, { arg out, in, amp, cut=2000; Out.ar(out, amp*LPF.ar(In.ar(in), cut)); }).send(s);

SynthDef(\rvb, { arg out, in, amp, roomsize = 10 ; Out.ar(out, amp* 0.2*GVerb.ar(In.ar(in), roomsize)); }).send(s);


//decalre an audio bus

~bus = Bus.audio(s, 1);

//1 means the instance will be 1 channel

r = Route(1);

//2 means the instance will be 2 channel  .. 3..4 and so on.

f = Route(2);

//Route synth cont to osc to filter then out to channel 0.

//Oscillscope window which shows all the synths in this instance is pop up when you actually start routing

r|>\cont=>\osc=>\filt==0;

//Route synth cont to osc to filter then out to the audio bus

r|>\cont=>\osc=+\filt==~bus;

//f is 2 channel, so now the signal is 2 channel

f>>~bus=>\rvb==0;

r.syn[4].set(\roomsize,2);

r.syn[0].set(\mfreq, 0.01);

r.syn[1].set(\amp, 0.02);

r.amps = [1,1,1,0.2,0.2]

//if you put  =+ instead of => right before the last synth, output from the last synth will be recorded

r|>\cont=>\osc=+\filt==0;

r.recordPath_("/Works_S/Sounds/RouteRecDefault.wav");


//you can also send and receive osc messages easily. check each methods



CLASSMETHODS::

METHOD:: new


ARGUMENT:: numchannels
Number of channels

returns::..


INSTANCEMETHODS::

METHOD:: >>

//Input from the outside bus

//Start with >> instead of normal |> if you want the first synth takes input from a bus

f>>~bus=>\rvb==0;

METHOD:: oscAutoOnOff

.oscAutoOnOff_(nil);

if true, send all amplitude values of the each synths in this instance as a string by osc

//default IP address is 127.0.0.1 you can change it by

.oscAutoNetAddress_( "someAddress" );

//default oscAutoNetPort is 7400 you can change it by

.oscAutoNetPort_( somePort..Integer );

//address is
'/SC_Route_'++someNumber++'_auto_'
//you cannot change this.

returns::...

METHOD:: recordPath

//setup record out path and filename

r.recordPath_("full path include filename.wav");

returns:: (describe returnvalue here)

METHOD:: |>

Start routing. First synth is not going to have an input

METHOD:: oscAutoNetAddress
(describe method here)

returns:: (describe returnvalue here)

METHOD:: ampfollowerAtkTime
(describe method here)

returns:: (describe returnvalue here)

METHOD:: getOscSendAddress
(describe method here)

returns:: (describe returnvalue here)

METHOD:: =>

Routing

ARGUMENT:: synthName

The current signal will be routed to this synth.

it means 'out' of the last synth is routed to 'in' of this synth.

Out.ar(out, theSignal) -> In.ar(in);

returns:: (describe returnvalue here)

METHOD:: =+

Record

ARGUMENT:: synthName

Signal after this synth will be recorded into a file.

returns:: (describe returnvalue here)

METHOD:: silentCutMode

//if true, the record file is going to be ended when there's silent.

r.silentCutMode_(true);

r.silentCutMode_(false);


returns:: (describe returnvalue here)

METHOD:: amps

Set amp arg values

returns:: (describe returnvalue here)

METHOD:: ampArraySize
(describe method here)

returns:: (describe returnvalue here)

METHOD:: oscRcv


r.oscRcv(0, \mfreq, true);

ARGUMENT:: synArrayNum
Route osc to which synth (first is 0)

ARGUMENT:: synParamName
Route osc to which argument of the synth

ARGUMENT:: msgOrNot
post value or not. true or nil. default is nil

returns:: (describe returnvalue here)

METHOD:: winOpen
open oscilloscope window or not. true or nil. default true

returns:: (describe returnvalue here)

METHOD:: ==

Output

ARGUMENT:: outChannel
to which channel, or to which audio bus

returns:: (describe returnvalue here)

METHOD:: oscAutoNetPort
(describe method here)

returns:: (describe returnvalue here)

METHOD:: addScopeView
(describe method here)

ARGUMENT:: index
(describe argument here)

returns:: (describe returnvalue here)

METHOD:: oscDefnamesCurrentNum
(describe method here)

returns:: (describe returnvalue here)

METHOD:: oscSignalSnd

//send amplitude of an audio bus to following address

r.oscSignalSnd(~bus, 7400);

ARGUMENT:: busInput
audio bus input

ARGUMENT:: netPort
port

ARGUMENT:: netAddress
IP address. default is localhost 127.0.0.1

ARGUMENT:: prefix
address name is going to be '/SC_Route_'++prefix. this is generally used by automatic osc send. you can write any number when you use this method manually. default is 0.

returns:: (describe returnvalue here)

METHOD:: ampfollowerRelTime
(describe method here)

returns::..


EXAMPLES::

code::
(some example code)
::